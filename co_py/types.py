# AUTOGENERATED! DO NOT EDIT! File to edit: 01_types.py.ipynb (unless otherwise specified).

__all__ = ['Base', 'Contest', 'Problem', 'ProblemStatistics', 'User', 'UserRating', 'BlogEntry', 'Comment', 'Party',
           'ProblemResult', 'RecentAction', 'Submission', 'RanklistRow', 'Standings', 'Hack', 'RatingChange']

# Cell
import datetime
import inflection

# Cell
#export
class Base:
    """
    Supports the repetitive operation.
    _fields attribute must be set for setting the attribute of the instance.
    _fields must be a dictionary, with the key as name of variable and value as the type of variable.
    """
    _fields = None
    def __init__(self, content: dict) -> None:
        self.init(content)

    def init(self, content: dict) -> None:
        """Sets the attributes of the instance based on _fields dictionary."""
        if not self._fields:
            raise ValueError('_fields is not set for the class')
        for field, val_type in self._fields.items():
            val = content.get(field)
            # if val exists, change it to its respective type
            if val and val_type is not None:
                val = val_type(val)
            setattr(self, inflection.underscore(field), val)

    def __repr__(self):
        return str(self.__dict__)

# Cell
class Contest(Base):
    _fields = {
        'id': int,
        'name': str,
        'type': str,
        'phase': str,
        'frozen': bool,
        'durationSeconds': int,
        'startTimeSeconds': int,
        'relativeTimeSeconds': int,
        'preparedBy': int,
        'websiteUrl': str,
        'description': str,
        'difficulty': int,
        'kind': str,
        'icpcRegion': str,
        'country': str,
        'city': str,
        'season': str,
    }

    def __init__(self, contest):
        super().__init__(contest)
        self.duration_hours = self.duration_seconds / (60*60)
        if self.start_time_seconds:
            self.start_time = datetime.datetime.fromtimestamp(self.start_time_seconds)
            self.end_time = self.start_time + datetime.timedelta(seconds=self.duration_seconds)

# Cell
class Problem(Base):
    _fields = {
        'contestId': int,
        'problemsetName': str,
        'index': str,
        'name': str,
        'type': str,
        'points': float,
        'rating': int,
        'tags': list,
    }

# Cell
class ProblemStatistics(Base):
    _fields = {
        'contestId': int,
        'index': str,
        'solvedCount': int
    }

# Cell
class User(Base):
    _fields = {
        'handle': str,
        'email': str,
        'vkId': str,
        'openId': str,
        'firstName': str,
        'lastName': str,
        'country': str,
        'city': str,
        'organization': str,
        'contribution': int,
        'rank': str,
        'rating': int,
        'maxRank': str,
        'maxRating': int,
        'lastOnlineTimeSeconds': int,
        'registrationTimeSeconds': int,
        'friendOfCount': int,
        'avatar': str,
        'titlePhoto': str
    }

# Cell
class UserRating(Base):
    _fields = {
        'contestId': int,
        'contestName': str,
        'handle': str,
        'rank': int,
        'ratingUpdateTimeSeconds': int,
        'oldRating': int,
        'newRating': int
    }

# Cell
class BlogEntry(Base):
    _fields = {
        'id': int,
        'originalLocale': str,
        'creationTimeSeconds': int,
        'authorHandle': str,
        'title': str,
        'content': str,
        'locale': str,
        'modificationTimeSeconds': int,
        'allowViewHistory': bool,
        'tags': list,
        'rating': int
    }

# Cell
class Comment(Base):
    _fields = {
        'id': int,
        'creationTimeSeconds': int,
        'commentatorHandle': str,
        'locale': str,
        'text': str,
        'parentCommentId': int,
        'rating': int
    }

# Cell
class Party(Base):
    _fields = {
        'contestId': int,
        'members': list,
        'participantType': str,
        'teamId': int,
        'teamName': str,
        'ghost': bool,
        'room': int,
        'startTimeSeconds': int
    }

# Cell
class ProblemResult(Base):
    _fields = {
        'points': float,
        'penalty': int,
        'rejectedAttemptCount': int,
        'type': str,
        'bestSubmissionTimeSeconds': int
    }

# Cell
class RecentAction(Base):
    _fields = {
        'timeSeconds': int,
        'blogEntry': BlogEntry,
        'comment': Comment
    }

# Cell
class Submission(Base):
    _fields = {
        'id': int,
        'contestId': int,
        'creationTimeSeconds': int,
        'relativeTimeSeconds': int,
        'problem': Problem,
        'author': Party,
        'programmingLanguage': str,
        'verdict': str,
        'testset': str,
        'passedTestCount': int,
        'timeConsumedMillis': int,
        'memoryConsumedBytes': int,
        'points': float
    }

# Cell
class RanklistRow(Base):
    _fields = {
        'party': Party,
        'rank': int,
        'points': float,
        'penalty': int,
        'successfulHackCount': int,
        'unsuccessfulHackCount': int,
        'problemResults': list,
        'lastSubmissionTimeSeconds': int
    }

# Cell
class Standings(Base):
    _fields = {
        'contest': Contest,
        'problems': list,
        'rows': list,
    }

# Cell
class Hack(Base):
    _fields = {
        'id': int,
        'creationTimeSeconds': int,
        'hacker': Party,
        'defender': Party,
        'verdict': str,
        'problem': Problem,
        'test': str,
        'judgeProtocol': dict
    }

# Cell
class RatingChange(Base):
    _fields = {
        'contestId': int,
        'contestName': str,
        'handle': str,
        'rank': int,
        'ratingUpdateTimeSeconds': int,
        'oldRating': int,
        'newRating': int
    }